
async def {{ name.lower_snake_case }}(self{% for param in params %}, {{ param.name.lower_snake_case }}{% endfor %}):
    """ Generated by dcsdkgen """
    request = {{ plugin_name.lower_camel_case }}_pb2.Subscribe{{ name.upper_camel_case }}Request()
    {{ name.lower_snake_case }}_stream = self._stub.Subscribe{{ name.upper_camel_case }}(request)

    try:
        async for response in {{ name.lower_snake_case }}_stream:
            {% if has_result %}
            result = self._extract_result(response)

            success_codes = [{{ plugin_name.upper_camel_case }}Result.Result.SUCCESS]
            if 'IN_PROGRESS' in [return_code.name for return_code in {{ plugin_name.upper_camel_case }}Result.Result]:
                success_codes.append({{ plugin_name.upper_camel_case }}Result.Result.IN_PROGRESS)
            if 'INSTRUCTION' in [return_code.name for return_code in {{ plugin_name.upper_camel_case }}Result.Result]:
                success_codes.append({{ plugin_name.upper_camel_case }}Result.Result.INSTRUCTION)

            if result.result not in success_codes:
                raise {{ plugin_name.upper_camel_case }}Error(result, "{{ name.lower_snake_case }}()"{% for param in params %}, {{ param.name.lower_snake_case }}{% endfor %})

            if result.result is {{ plugin_name.upper_camel_case }}Result.Result.SUCCESS:
                {{ name.lower_snake_case }}_stream.cancel();
                return
            {% endif %}

        {% if not return_type %}
            yield None
        {%- elif return_type.is_primitive %}
            yield response.{{ return_name.lower_snake_case }}
        {%- else %}
            yield {{ return_type.name }}.translate_from_rpc(response.{{ return_name.lower_snake_case }})
        {%- endif %}
    finally:
        {{ name.lower_snake_case }}_stream.cancel()
